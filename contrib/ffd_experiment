#!/usr/bin/env python

import argparse
import os
from subprocess import call

from pyDOE import fracfact


parser = argparse.ArgumentParser(description='Tool for running klee experiments')
parser.add_argument('llvm_dir', type=str,
                    help='Directory of llvm bitcode files')
parser.add_argument('timeout', type=int, help='Timeout for experiments')
parser.add_argument('output_dir', type=str, help='Output directory for writing results')


COMMAND_TEMPLATE = [
    'klee',
    '--simplify-sym-indices',
    '--write-cov',
    '--use-query-log',
    'solver:kquery',
    '--output-module',
    '--allow-external-sym-calls',
    '--only-output-states-covering-new',
    '--max-sym-array-size',
    '4096',
    '--max-instruction-time',
    '10.',
    '--watchdog',
    '--search',
    'dfs',
    '--max-static-fork-pct=1',
    '--max-static-solve-pct=1',
    '--max-static-cpfork-pct=1',
    '--posix-runtime',
    '--libc=uclibc',
    '--solver-backend=stp',
    '--use-cache=0',
    '--use-cex-cache=0',
]

FACTORS = [
    'adce',
    'memtoreg',
    'sccp',
    'licm',
    'gopt',
    'dse',
    'loopunswitch',
    'constmerge',
    'sreplaggr',
    'inline',
    'instrcomb'
]


TOOLS = [
  'base64',
  'basename',
  'chcon',
  'cksum',
  'comm',
  'cut',
  'dd',
  'dircolors',
  'dirname',
  'du',
  'env',
  'expand',
  'expr',
  'fold',
  'groups',
  'link',
  'logname',
  'mkdir',
  'mkfifo',
  'mknod',
  'nice',
  'nl',
  'od',
  'paste',
  'pathchk',
  'printf',
  'readlink',
  'rmdir',
  'setuidgid',
  'sleep',
  'split',
  'sum',
  'sync',
  'tee',
  'touch',
  'tr',
  'tsort',
  'unexpand',
  'unlink',
  'wc'
]


DESIGN = 'a b c d e abc bcd cde acd ade bde'
TABLE = fracfact(DESIGN)


def construct_opt_options(optimizations):
    if not optimizations:
        return []
    return [
        '--optimize',
        '--opt-type',
        ','.join(optimizations)
    ]


def run_experiment(tool, optimizations, timeout, llvm_dir,
                   output_dir):
    opt_opts = construct_opt_options(optimizations)
    opts = ['no'] if not optimizations else optimizations

    template = list(COMMAND_TEMPLATE)
    template.extend(opt_opts)
    tool_path = os.path.join(llvm_dir, 'src', tool + '.bc')
    output_dir = os.path.join(
        output_dir, '{!s}-{!s}-{!s}'.format(tool, '_'.join(opts), str(timeout)))
    template.extend([
        '--max-time',
        str(timeout),
        '--output-dir',
        output_dir,
        tool_path,
        '--sym-args',
        '0',
        '1',
        '10',
        '--sym-args',
        '0',
        '2',
        '2',
        '--sym-files',
        '1',
        '8',
        '--sym-stdin',
        '8'
    ])
    call(template)


def main():
    args = parser.parse_args()

    for tool in TOOLS:
        for row in TABLE:
            optimizations = [FACTORS[i]
                            for i, column in enumerate(row)
                            if column == 1]
            run_experiment(tool, optimizations, args.timeout, args.llvm_dir,
                           args.output_dir)


if __name__ == '__main__':
    main()
